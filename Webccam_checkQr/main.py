import sys
import pandas as pd
import cv2
from pyzbar import pyzbar
import numpy as np
import time
import os
import requests
import snap7
from snap7.util import set_int
from PyQt5.QtCore import Qt, pyqtSignal, QThread
from PyQt5.QtWidgets import (QApplication, QWidget, QVBoxLayout, QHBoxLayout,
                             QLabel, QPushButton, QTextEdit, QFileDialog, QLineEdit)
from PyQt5.QtGui import QPixmap, QImage, QFont

# ƒê·ªãnh nghƒ©a th√¥ng s·ªë k·∫øt n·ªëi PLC v√† Webserver
PLC_IP = '192.168.0.1'
RACK = 0
SLOT = 1
DB_NUMBER = 1
WEBSERVER_URL = 'http://127.0.0.1:5000'

# C√°c bi·∫øn l∆∞u tr·∫°ng th√°i IP v√† URL hi·ªán t·∫°i
plc_ip_current = PLC_IP
webserver_url_current = WEBSERVER_URL

# Kh·ªüi t·∫°o k·∫øt n·ªëi v·ªõi PLC
client = snap7.client.Client()
stop_threads = False

try:
    client.connect(plc_ip_current, RACK, SLOT)
    print("‚úÖ K·∫øt n·ªëi PLC l·∫ßn ƒë·∫ßu th√†nh c√¥ng.")
except Exception as e:
    print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi PLC l·∫ßn ƒë·∫ßu: {e}")

# Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn PLC
def is_connected(client):
    try:
        return client.get_connected()
    except:
        return False

# Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn Webserver
def is_connected_webserver():
    try:
        response = requests.get(webserver_url_current, timeout=3)
        return response.status_code == 200
    except:
        return False

# L·∫•y v·ªã tr√≠ t·ª´ d·ªØ li·ªáu Excel v√† g·ª≠i v√†o PLC
def get_position_from_file(qr_code):
    global window
    try:
        if 'window' not in globals() or not hasattr(window, 'data_dict'):
            window.log_to_terminal("‚ö†Ô∏è Ch∆∞a t·∫£i d·ªØ li·ªáu Excel.")
            return [243]

        # Ki·ªÉm tra m√£ QR c√≥ trong d·ªØ li·ªáu kh√¥ng
        if qr_code not in window.data_dict:
            window.log_to_terminal("‚ö†Ô∏è QR code kh√¥ng t·ªìn t·∫°i trong d·ªØ li·ªáu Excel.")
            return [243]

        address = str(window.data_dict[qr_code]).strip()
        window.pos_label.setText(f"üìç V·ªã tr√≠: {address}")
        words1 = address.lower().split()
        # T√¨m v·ªã tr√≠ ph√π h·ª£p t·ª´ d·ªØ li·ªáu v·ªã tr√≠
        max_len_max = 0
        for file_address, file_pos in window.address_to_pos_dict.items():
            words2 = file_address.lower().split()
            max_len = 0
            # Ki·ªÉm tra s·ª± tr√πng l·∫∑p gi·ªØa c√°c c·ª•m t·ª´ li√™n ti·∫øp
            n, m = len(words1), len(words2)
            dp = [[0] * (m + 1) for _ in range(n + 1)]
          
            for i in range(n):
                for j in range(m):
                    if words1[i] == words2[j]:
                        dp[i + 1][j + 1] = dp[i][j] + 1
                        max_len = max(max_len, dp[i + 1][j + 1])
                    else:
                        dp[i + 1][j + 1] = 0

            if max_len_max <= max_len :
                max_len_max = max_len
        
        if max_len_max > 0:
            for file_address, file_pos in window.address_to_pos_dict.items():
                words3 = file_address.lower().split()
                common_phrase = []
                for i in range(len(words1) - 1):
                    phrase1 = ' '.join(words1[i:i+max_len_max]) 
                    if phrase1 in ' '.join(words3):
                        common_phrase.append(phrase1)

                if common_phrase :        
                    pos = int(file_pos)
                    window.log_to_terminal(f"‚úÖ V·ªã tr√≠ ph√¢n lo·∫°i: {pos}")
                    
                    # G·ª≠i v·ªã tr√≠ v√†o PLC n·∫øu k·∫øt n·ªëi
                    if is_connected(client):
                        try:
                            index = pos - 1  
                            if 0 <= index <= 7:
                                client.db_write(DB_NUMBER, index, 1)
                                time.sleep(0.2)
                                client.db_write(DB_NUMBER, index, 0)
                                window.log_to_terminal(f"üì§ G·ª≠i v·ªã tr√≠ v√†o PLC: {pos}")
                            else:
                                window.log_to_terminal(f"‚ö†Ô∏è V·ªã tr√≠ {pos} kh√¥ng h·ª£p l·ªá")
                        except Exception as e:
                            window.log_to_terminal(f"‚ùå L·ªói khi g·ª≠i v√†o PLC: {e}")
 

                            window.log_to_terminal(f"üì§ G·ª≠i v·ªã tr√≠ v√†o PLC: {pos}")
                        except Exception as e:
                            window.log_to_terminal(f"‚ùå L·ªói g·ª≠i d·ªØ li·ªáu v·ªã tr√≠ v√†o PLC: {e}")
                    else : 
                        window.log_to_terminal(f"‚ùå L·ªói g·ª≠i d·ªØ li·ªáu v√†o PLC do m·∫•t k·∫øt n·ªëi v·ªõi PLC")

                    return [pos]
        else :
            window.log_to_terminal(f"‚ùå ƒê·ªãa ch·ªâ n·∫±m ngo√†i ph·∫°m vi ph√¢n lo·∫°i")
        window.log_to_terminal("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu v·ªã tr√≠ h·ªá th·ªëng ph√π h·ª£p.")
        return [243]

    except Exception as e:
        window.log_to_terminal(f"‚ùå L·ªói ƒë·ªçc file: {e}")
        return [234]


# L·ªõp x·ª≠ l√Ω qu√©t QR Code trong lu·ªìng ri√™ng
class QRScannerThread(QThread):
    frame_updated = pyqtSignal(np.ndarray)  # T√≠n hi·ªáu c·∫≠p nh·∫≠t ·∫£nh
    qr_code_detected = pyqtSignal(str)  # T√≠n hi·ªáu ph√°t hi·ªán m√£ QR

    def __init__(self):
        super().__init__()
        self.last_detection_time = time.time()
        self.last_qr_code = ""

    def run(self):
        global stop_threads

        # Kh·ªüi t·∫°o camera
        cap = cv2.VideoCapture(0)
        if not cap.isOpened():
            window.log_to_terminal("‚ùå Kh√¥ng th·ªÉ m·ªü camera!")
            blank = np.zeros((480, 640, 3), dtype=np.uint8)
            self.frame_updated.emit(blank)
            return

        cap.set(3, 640)  # ƒê·∫∑t chi·ªÅu r·ªông c·ªßa video
        cap.set(4, 480)  # ƒê·∫∑t chi·ªÅu cao c·ªßa video

        while not stop_threads:
            ret, frame = cap.read()
            if not ret:
                time.sleep(0.1)
                continue

            # Chuy·ªÉn ƒë·ªïi ·∫£nh sang x√°m ƒë·ªÉ qu√©t QR code
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            qrcodes = pyzbar.decode(gray)

            # Ki·ªÉm tra v√† v·∫Ω c√°c m√£ QR l√™n ·∫£nh
            for qrcode in qrcodes:
                (x, y, w, h) = qrcode.rect
                if w > 0 and h > 0:
                    data = qrcode.data.decode('utf-8')
                    # Ch·ªâ c·∫≠p nh·∫≠t m√£ QR m·ªõi sau m·ªói 0.5s
                    if time.time() - self.last_detection_time > 0.5 and data != self.last_qr_code:
                        self.last_qr_code = data
                        window.log_to_terminal(f"üì∑ M√£ QR m·ªõi: {data}")
                        result = get_position_from_file(data)
                        if isinstance(result, list):
                            self.qr_code_detected.emit(data)
                        self.last_detection_time = time.time()
                    cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 255), 2)
                    cv2.putText(frame, f"{data}", (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.4, (0, 0, 255), 2)

            self.frame_updated.emit(frame)

        cap.release()


# L·ªõp theo d√µi tr·∫°ng th√°i k·∫øt n·ªëi PLC v√† Webserver
class ConnectionMonitorThread(QThread):
    status_updated = pyqtSignal(bool, bool)
    last_plc_status = None
    last_web_status = None

    def run(self):
        global stop_threads
        while not stop_threads:
            plc_status = is_connected(client)  # Ki·ªÉm tra k·∫øt n·ªëi PLC
            web_status = is_connected_webserver()  # Ki·ªÉm tra k·∫øt n·ªëi Webserver
            if plc_status != self.last_plc_status or web_status != self.last_web_status:
                self.status_updated.emit(plc_status, web_status)  # C·∫≠p nh·∫≠t tr·∫°ng th√°i k·∫øt n·ªëi
                self.last_plc_status = plc_status
                self.last_web_status = web_status
            time.sleep(3)

            if not plc_status:
                window.log_to_terminal("üîÑ M·∫•t k·∫øt n·ªëi PLC. Th·ª≠ k·∫øt n·ªëi l·∫°i...")
                try:
                    if not client.get_connected():
                        client.connect(plc_ip_current, RACK, SLOT)
                        window.log_to_terminal("‚úÖ ƒê√£ k·∫øt n·ªëi l·∫°i PLC th√†nh c√¥ng.")
                except Exception as e:
                    window.log_to_terminal(f"‚ùå L·ªói k·∫øt n·ªëi l·∫°i PLC: {e}")


# L·ªõp giao di·ªán ch√≠nh ·ª©ng d·ª•ng
class DemoApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Giao di·ªán ƒë·∫ßu v√†o")
        self.setFixedSize(1800, 600)
        self.setGeometry(100, 100, 1000, 300)

        # Thi·∫øt l·∫≠p giao di·ªán
        main_layout = QHBoxLayout()

        self.excel_btn = QPushButton("üìÇ Ch·ªçn file Excel")
        self.excel_btn.clicked.connect(self.load_excel)  # N√∫t ch·ªçn file Excel
        self.excel_display = QTextEdit()
        self.excel_display.setReadOnly(True)

        left_layout = QVBoxLayout()
        left_layout.addWidget(QLabel("üóÇ Nh·∫≠p d·ªØ li·ªáu t·ª´ Excel:"))
        left_layout.addWidget(self.excel_btn)
        left_layout.addWidget(self.excel_display)

        # Hi·ªÉn th·ªã video t·ª´ camera
        self.image_label = QLabel()
        self.image_label.setFixedSize(640, 480)
        self.image_label.setStyleSheet("background-color: lightgray")

        center_layout = QVBoxLayout()
        center_layout.addWidget(QLabel("üé• Camera (video tr·ª±c ti·∫øp):"))
        center_layout.addWidget(self.image_label)

        # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ m√£ QR v√† v·ªã tr√≠
        self.qr_label = QLabel("üì¶ M√£ QR: (ch∆∞a c√≥)")
        self.pos_label = QLabel("üìç V·ªã tr√≠: (ch∆∞a c√≥)")
        self.plc_status_label = QLabel("üîå PLC: ƒêang ki·ªÉm tra...")
        self.webserver_status_label = QLabel("üîå Webserver: ƒêang ki·ªÉm tra...")

        # ƒê√®n b√°o tr·∫°ng th√°i k·∫øt n·ªëi
        self.plc_status_led = QLabel()
        self.plc_status_led.setFixedSize(20, 20)
        self.webserver_status_led = QLabel()
        self.webserver_status_led.setFixedSize(20, 20)

        # C√°c layout cho PLC v√† Webserver
        plc_layout = QHBoxLayout()
        plc_layout.addWidget(self.plc_status_label)
        plc_layout.addWidget(self.plc_status_led)
        web_layout = QHBoxLayout()
        web_layout.addWidget(self.webserver_status_label)
        web_layout.addWidget(self.webserver_status_led)

        self.ip_input = QLineEdit()
        self.ip_input.setText(PLC_IP)
        self.url_input = QLineEdit()
        self.url_input.setText(WEBSERVER_URL)

        self.ip_btn = QPushButton("üîÑ C·∫≠p nh·∫≠t IP v√† URL m·ªõi.")
        self.ip_btn.clicked.connect(self.update_plc_webserver_address)

        right_layout = QVBoxLayout()
        right_layout.addWidget(QLabel("üì§ Th√¥ng tin Output:"))
        right_layout.addWidget(self.qr_label)
        right_layout.addWidget(self.pos_label)
        right_layout.addLayout(plc_layout)
        right_layout.addLayout(web_layout)
        right_layout.addWidget(QLabel("üåê URL Webserver:"))
        right_layout.addWidget(self.url_input)
        right_layout.addWidget(QLabel("üåê IP PLC:"))
        right_layout.addWidget(self.ip_input)
        right_layout.addWidget(self.ip_btn)
        right_layout.addStretch()

        # Output cho terminal log
        self.terminal_output = QTextEdit()
        self.terminal_output.setReadOnly(True)
        self.terminal_output.setStyleSheet("background-color: black; color: white;")
        font = QFont("Consolas")
        font.setPointSize(9)
        self.terminal_output.setFont(font)

        terminal_layout = QVBoxLayout()
        terminal_layout.addWidget(QLabel("üñ• Terminal Output:"))
        terminal_layout.addWidget(self.terminal_output)

        main_layout.addLayout(left_layout)
        main_layout.addLayout(center_layout)
        main_layout.addLayout(right_layout)
        main_layout.addLayout(terminal_layout)

        self.setLayout(main_layout)
        self.data_dict = {}
        self.address_to_pos_dict = {}

        # Kh·ªüi t·∫°o c√°c thread
        self.qr_scanner_thread = QRScannerThread()
        self.qr_scanner_thread.frame_updated.connect(self.update_image)
        self.qr_scanner_thread.qr_code_detected.connect(self.update_qr_info)
        self.qr_scanner_thread.start()

        self.connection_thread = ConnectionMonitorThread()
        self.connection_thread.status_updated.connect(self.update_status)
        self.connection_thread.start()

    # H√†m log th√¥ng b√°o v√†o terminal
    def log_to_terminal(self, msg):
        self.terminal_output.moveCursor(self.terminal_output.textCursor().End)
        self.terminal_output.insertPlainText(msg + '\n')
        self.terminal_output.moveCursor(self.terminal_output.textCursor().End)

    # H√†m t·∫£i d·ªØ li·ªáu t·ª´ file Excel
    def load_excel(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "Ch·ªçn file Excel", "", "Excel Files (*.xlsx *.xls)")
        if file_path:
            try:
                df = pd.read_excel(file_path)
                if not {'QR', 'Address'}.issubset(df.columns):
                    self.excel_display.setText("‚ùå File Excel c·∫ßn c√≥ c·ªôt 'QR' v√† 'Address'")
                    return
                self.excel_display.setText(str(df))
                self.data_dict = {str(row['QR']).strip(): row['Address'] for _, row in df.iterrows()}
                self.address_to_pos_dict = {}
                file_path_txt = os.path.join(os.getcwd(), "adress_to_position.txt")
                if os.path.exists(file_path_txt):
                    with open(file_path_txt, "r", encoding="utf-8") as f:
                        for line in f:
                            parts = line.strip().split(' | ')
                            if len(parts) >= 2:
                                addr, pos = parts
                                self.address_to_pos_dict[addr.strip()] = int(float(pos))
                else :
                    self.log_to_terminal("‚ùå Thi·∫øu d·ªØ li·ªáu v·ªã tr√≠ setup.")
                self.log_to_terminal("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu Excel v√† d·ªØ li·ªáu v·ªã tr√≠.")
            except Exception as e:
                self.excel_display.setText(f"L·ªói: {e}")
                self.log_to_terminal(f"‚ùå L·ªói t·∫£i Excel: {e}")

    # C·∫≠p nh·∫≠t h√¨nh ·∫£nh t·ª´ camera
    def update_image(self, frame):
        rgb_image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        qt_img = QImage(rgb_image.data, w, h, ch * w, QImage.Format_RGB888)
        pixmap = QPixmap.fromImage(qt_img).scaled(self.image_label.size(), Qt.KeepAspectRatio)
        self.image_label.setPixmap(pixmap)

    # C·∫≠p nh·∫≠t th√¥ng tin m√£ QR khi ph√°t hi·ªán
    def update_qr_info(self, qr_code):
        self.qr_label.setText(f"üì¶ M√£ QR: {qr_code}")

    # C·∫≠p nh·∫≠t tr·∫°ng th√°i k·∫øt n·ªëi PLC v√† Webserver
    def update_status(self, plc_connected, web_connected):
        self.plc_status_label.setText("üîå PLC: ƒê√£ k·∫øt n·ªëi" if plc_connected else "üîå PLC: M·∫•t k·∫øt n·ªëi")
        self.plc_status_led.setStyleSheet("background-color: green;" if plc_connected else "background-color: red;")
        self.webserver_status_label.setText("üîå Webserver: ƒê√£ k·∫øt n·ªëi" if web_connected else "üîå Webserver: M·∫•t k·∫øt n·ªëi")
        self.webserver_status_led.setStyleSheet("background-color: green;" if web_connected else "background-color: red;")

    # C·∫≠p nh·∫≠t l·∫°i IP v√† URL cho PLC v√† Webserver
    def update_plc_webserver_address(self):
        global plc_ip_current, webserver_url_current
        new_ip = self.ip_input.text().strip()
        new_url = self.url_input.text().strip()
        if not new_ip or not new_url:
            self.log_to_terminal("‚ùå IP PLC ho·∫∑c URL Webserver kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
            return
        plc_ip_current = new_ip
        webserver_url_current = new_url
        self.log_to_terminal(f"üîÅ ƒê√£ c·∫≠p nh·∫≠t PLC IP m·ªõi : {new_ip} v√† URL Webserver m·ªõi : {new_url}.")

    # X·ª≠ l√Ω s·ª± ki·ªán khi ƒë√≥ng c·ª≠a s·ªï
    def closeEvent(self, event):
        global stop_threads
        stop_threads = True
        self.qr_scanner_thread.quit()
        self.connection_thread.quit()
        self.qr_scanner_thread.wait()
        self.connection_thread.wait()
        event.accept()


# Ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = DemoApp()
    window.show()
    sys.exit(app.exec_())
